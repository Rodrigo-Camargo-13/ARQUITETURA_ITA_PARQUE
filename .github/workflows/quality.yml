name: quality-gates

on:
  push: { branches: [ "main" ] }
  pull_request: { branches: [ "main" ] }
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write

jobs:
  sanity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "sanity ok"

  quality:
    runs-on: ubuntu-latest
    needs: [sanity]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }

      # .NET
      - name: Setup .NET
        if: ${{ hashFiles('**/*.csproj') != '' }}
        uses: actions/setup-dotnet@v4
        with: { dotnet-version: '8.0.x' }
      - name: Build/Test .NET
        if: ${{ hashFiles('**/*.csproj') != '' }}
        run: |
          dotnet restore
          dotnet build -c Release --no-restore
          if ls **/*Tests.csproj 1> /dev/null 2>&1; then dotnet test -c Release --no-build; fi

      # Java (Maven)
      - name: Setup Java
        if: ${{ hashFiles('**/pom.xml') != '' }}
        uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }
      - name: Build Java
        if: ${{ hashFiles('**/pom.xml') != '' }}
        run: mvn -B -DskipTests package

      # Python
      - name: Setup Python
        if: ${{ hashFiles('**/requirements.txt') != '' }}
        uses: actions/setup-python@v5
        with: { python-version: '3.x' }
      - name: Install Python deps
        if: ${{ hashFiles('**/requirements.txt') != '' }}
        run: |
          for f in $(git ls-files '**/requirements.txt'); do pip install -r "$f"; done

      # OpenAPI / AsyncAPI
      - name: Validate OpenAPI
        if: ${{ hashFiles('docs/apis-openapi/**/*.yml') != '' || hashFiles('docs/apis-openapi/**/*.yaml') != '' }}
        run: |
          npm i -g @redocly/cli
          redocly lint "docs/apis-openapi/**/*.{yml,yaml}"

      - name: Validate AsyncAPI
        if: ${{ hashFiles('docs/eventos-asyncapi/**/*.yml') != '' || hashFiles('docs/eventos-asyncapi/**/*.yaml') != '' }}
        run: |
          npm i -g @asyncapi/cli
          asyncapi validate "docs/eventos-asyncapi/**/*.{yml,yaml}"

      # SAST
      - name: SAST (Semgrep) — advisory
        if: ${{ hashFiles('**/*.cs','**/*.java','**/*.py','**/*.js','**/*.ts') != '' }}
        run: |
          python -m pip install --upgrade pip
          pip install semgrep
          semgrep ci --config security/semgrep/semgrep.yml --sarif --output semgrep.sarif || echo "Semgrep findings (advisory)."

      # SCA/Misconfig/Secrets
      - name: SCA & Misconfig (Trivy FS) — advisory
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '0'   # mude para '1' quando quiser bloquear PR
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          scanners: 'vuln,secret,misconfig'
          hide-progress: true

      # SBOM
      - name: SBOM (CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: cyclonedx-json
          output-file: sbom.cdx.json
