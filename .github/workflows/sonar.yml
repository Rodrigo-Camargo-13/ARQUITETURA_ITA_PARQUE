name: sonar

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  sonar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (histórico completo para blame)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Gate: só roda se os secrets existirem
      - name: Decidir execução
        id: gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          if [ -n "${SONAR_TOKEN}" ] && [ -n "${SONAR_HOST_URL}" ]; then
            echo "run=true" >> "$GITHUB_OUTPUT"
          else
            echo "run=false" >> "$GITHUB_OUTPUT"
            echo "Aviso: SONAR_TOKEN/SONAR_HOST_URL ausentes; job será ignorado."
          fi

      # (Opcional) Sanity check: ver se o token enxerga o projeto na API
      - name: Sanity check API
        if: steps.gate.outputs.run == 'true'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          set -e
          PK="Rodrigo-Camargo-13_ARQUITETURA_ITA_PARQUE"
          echo "Consultando ${SONAR_HOST_URL} pelo projeto [$PK]..."
          # retorna 0 se achar "components":[1 ou mais]
          curl -sSf -H "Authorization: Bearer ${SONAR_TOKEN}" \
            "${SONAR_HOST_URL}/api/projects/search?projects=${PK}" \
          | grep -q '"components":\[[^][]' \
          && echo "Projeto encontrado pela API." \
          || (echo "Projeto NÃO encontrado pela API (token/org/host?)." && exit 1)

      - name: Setup Java (para scanner)
        if: steps.gate.outputs.run == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Sonar Scan
        if: steps.gate.outputs.run == 'true'
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          # Passamos as chaves TAMBÉM por argumento para garantir
          args: >
            -Dsonar.projectKey=Rodrigo-Camargo-13_ARQUITETURA_ITA_PARQUE
            -Dsonar.organization=rodrigo-camargo-13

      # Falha o pipeline se o Quality Gate reprovar
      - name: Quality Gate
        if: steps.gate.outputs.run == 'true'
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 10
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
